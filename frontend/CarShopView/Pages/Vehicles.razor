@page "/veiculos"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations;
@using CarShopView.Models;
@using CarShopView.Services
@using CarShopView.Repositories
@using System.Net;
@inject IAuthService auth
@inject IVehicleRepository refit

<PageTitle>Veiculos</PageTitle>

<h1>Painel de Veiculos</h1>
<nav class="row row-cols-auto justify-content-end mb-5">
    @* <div class="col justify-content-md-end">
        <AutoComplete @bind-Value="vehicleInputName"
                      TItem="Vehicle"
                      DataProvider="VehicleDataProvider"
                      PropertyName="Name"
                      Placeholder="Procure por veiculos..."
                      OnChanged="(Vehicle vehicleInput) => OnAutoCompleteChanged(vehicleInput)"
                      Size="AutoCompleteSize.Small" />
    </div> *@
    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
        <Button Class="col bi bi-car-front-fill" Color="ButtonColor.Success" @onclick='OnShowModalBuyVehicle'> Comprar Veiculo</Button>
    </div>
</nav>
<h1>@auth.Token</h1>
@if (vehicles == null)
{
    <p><em>Carregando Veiculos...</em></p>
}
else
{
    <section class="row">
        @foreach (var v in vehicles)
        {
            <Card Class="col mb-4 mx-2" style="min-width: 250px; max-width: 250px">
                <img class="rounded-top" src="images/placeholder.png" alt="placeholder" />
                <CardBody>
                    <CardTitle>@v.Brand</CardTitle>
                    <CardSubTitle Class="mb-2 text-muted">@v.Model | @v.ModelYear.Year</CardSubTitle>
                    <CardText class="font-weight-light"><small>@v.Description</small></CardText>
                    <div class="row">
                        <Button @onclick='() => OnShowModalSellVehicle(v)' class="bi bi-cart-fill col-6 ms-1" Color="ButtonColor.Success" To="#" Type="ButtonType.Link" Disabled="@(v.Situation != "DISPONIVEL")"> Vender</Button>
                        <Button @onclick='() => ShowConfirmationDeleteVehicleAsync(v.Id)' class="bi bi-trash-fill col ms-1" Color="ButtonColor.Danger" Type="ButtonType.Link"></Button>
                        <Button @onclick='() => OnShowModalInfoVehicle(v)' class="bi  bi-info-circle-fill col ms-1" Color="ButtonColor.Primary" Type="ButtonType.Link"></Button>
                    </div>
                </CardBody>
            </Card>
        }
    </section>
}

<Modal @ref="buyVehicleModal"
    OnShow='OnShowModalBuyVehicle'
    OnHidden='OnHideModalBuyVehicle'
    Title="Compra de Veiculo">
    <BodyTemplate>
        <EditForm Model="@vehicle" OnValidSubmit="@HandleBuyVehicleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="form-group mt-3 col-6">
                    <label for="renavan">Renavan: <span class="text-danger">*</span></label>
                    <InputText id="renavan" class="form-control" @bind-Value="@vehicle.Renavan" />
                    <ValidationMessage For="@(() => vehicle.Renavan)" />
                </div>

                <div class="form-group mt-3 col-6">
                    <label for="license-plate">Placa: <span class="text-danger">*</span></label>
                    <InputText id="license-plate" class="form-control" @bind-Value="@vehicle.License" />
                    <ValidationMessage For="@(() => vehicle.License)" />
                </div>
            </div>

            <div class="row">
                <div class="form-group mt-3 col-4">
                    <label for="brand">Marca: <span class="text-danger">*</span></label>
                    <InputText id="brand" class="form-control" @bind-Value="@vehicle.Brand" />
                    <ValidationMessage For="@(() => vehicle.Brand)" />
                </div>

                <div class="form-group mt-3 col-4">
                    <label for="model">Modelo: <span class="text-danger">*</span></label>
                    <InputText id="model" class="form-control" @bind-Value="@vehicle.Model" />
                    <ValidationMessage For="@(() => vehicle.Model)" />
                </div>

                <div class="form-group mt-3 col-4">
                    <label for="vehicle-type">Tipo de Veiculo: <span class="text-danger">*</span></label>
                    <InputText id="vehicle-type" class="form-control" @bind-Value="@vehicle.VehicleType" />
                    <ValidationMessage For="@(() => vehicle.VehicleType)" />
                </div>
            </div>

            <div class="row">
                <div class="mt-3 col-6">
                    <label for="model-year">Ano do Modelo: </label>
                    <DateInput id="model-year" TValue="DateTime" @bind-Value="@dateTimeModelYear" Placeholder="Selecione a Data do modelo" />
                </div>
                <div class="mt-3 col-6">
                    <label for="year-manufacture">Ano de Fabricação: </label>
                    <DateInput id="year-manufacture" TValue="DateTime" @bind-Value="@dateTimeYearManufacture" Placeholder="Selecione a Data de fabricação" />
                </div>
            </div>

            <div class="form-group mt-3">
                <label for="description">Descrição: <span class="text-danger">*</span></label>
                <InputTextArea id="description" class="form-control" @bind-Value="@vehicle.Description" />
                <ValidationMessage For="@(() => vehicle.Description)" />
            </div>

            <div class="form-group mt-3">
                <label for="situation">Situação: <span class="text-danger">*</span></label>
                <InputSelect id="situation" class="form-control" @bind-Value="vehicle.Situation">
                    <option value="">Selecione uma opção...</option>
                    <option value="DISPONIVEL">Disponivel</option>
                    <option value="INDISPONIVEL">Indisponivel</option>
                </InputSelect>
                <ValidationMessage For="@(() => vehicle.Situation)" />
            </div>

            <div class="form-group mt-3">
                <label for="vehicle-images">Adicione Imagens: <span class="text-danger">*</span></label>
                <InputFile id="vehicle-images" class="form-control" multiple />
                @* <ValidationMessage For="@(() => vehicle.VehicleType)" /> *@
            </div>

            <div class="mt-3">
                <label for="customer">Cliente: </label>
                <AutoComplete id="customer" @bind-Value="customerInputName"
                    TItem="Customer"
                    DataProvider="CustomersDataProvider"
                    PropertyName="Name"
                    Placeholder="Procure por clientes..."
                    OnChanged="(Customer customerInput) => OnAutoCompleteChanged(customerInput)"
                    Size="AutoCompleteSize.Small" />
            </div>
            <div class="col-6 mt-3 mb-5">
                <label for="vehicle-value">Valor de Compra: </label>
                <CurrencyInput id="vehicle-value" TValue="decimal" @bind-Value="ValueV" Placeholder="Entre o valor" />
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-success">Submit</button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

<Modal @ref="sellVehicleModal"
    OnHidden='OnHideModalSellVehicle'
    Title="Venda de Veiculo">
    <BodyTemplate>
        <img src="images/placeholder.png" class="img-thumbnail rounded mx-auto d-block mb-4" alt="...">
        <div >
            <p class="h2">
                @vehicle.Brand | @vehicle.Model | @vehicle.ModelYear.Year
            </p>
            <div class="row">
                <p class="col-6 bi bi-file-medical-fill"> Placa: @vehicle.License</p>
                <p class="col-6 bi bi-file-medical-fill"> Renavan: @vehicle.Renavan</p>
            </div>
            <div class="row">
                <p class="col-6 bi bi-"> Tipo: @vehicle.VehicleType</p>
                <p class="col-6 bi bi-cart-check-fill"> Situação: @vehicle.Situation</p>
            </div>
            <p><small class="bi bi-info-circle"> Descrição:<br> @vehicle.Description</small></p>
        </div>
        <EditForm Model="@vehicle" OnValidSubmit="@HandleSellVehicleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mt-3">
                <label for="customer">Cliente: </label>
                <AutoComplete id="customer" @bind-Value="customerInputName"
                    TItem="Customer"
                    DataProvider="CustomersDataProvider"
                    PropertyName="Name"
                    Placeholder="Procure por clientes..."
                    OnChanged="(Customer customerInput) => OnAutoCompleteChanged(customerInput)"
                    Size="AutoCompleteSize.Small" />
            </div>
            <div class="col-6 mt-3 mb-5">
                <label for="vehicle-value">Valor de Compra: </label>
                <CurrencyInput id="vehicle-value" TValue="decimal" @bind-Value="ValueV" Placeholder="Entre o valor" />
            </div>
            <div class="col-6 mt-3 mb-5">
                <label for="vehicle-value-sell">Valor de Venda: </label>
                <CurrencyInput id="vehicle-value-sell" TValue="decimal" @bind-Value="ValueV" Placeholder="Entre o valor" />
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-success">Submit</button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

<Modal @ref="infoVehicleModal"
    OnHidden='OnHideModalInfoVehicle'
    Title="Informações do Carro">
    <BodyTemplate>
        <img src="images/placeholder.png" class="img-thumbnail rounded mx-auto d-block mb-4" alt="...">
        <div >
            <p class="h2">
                @vehicle.Brand | @vehicle.Model | @vehicle.ModelYear.Year
            </p>
            <div class="row">
                <p class="col-6 bi bi-file-medical-fill"> Placa: @vehicle.License</p>
                <p class="col-6 bi bi-file-medical-fill"> Renavan: @vehicle.Renavan</p>
            </div>
            <div class="row">
                <p class="col-6 bi bi-"> Tipo: @vehicle.VehicleType</p>
                <p class="col-6 bi bi-cart-check-fill"> Situação: @vehicle.Situation</p>
            </div>
            <p><small class="bi bi-info-circle"> Descrição:<br> @vehicle.Description</small></p>
        </div>
    </BodyTemplate>
</Modal>

<DialogMessage Messages="@messages" />

<ConfirmDialog @ref="dialogDeleteVehicle" />

@code {
    private decimal                 ValueV;
    private string                  route = "veiculos";
    private string                  routeFinancial = "movimentacoes";
    private Modal                   buyVehicleModal = default!;
    private Modal                   sellVehicleModal = default!;
    private Modal                   infoVehicleModal = default!;
    private EditContext?            editContext;

    private Vehicle                 vehicle;
    private Transaction              transaction;
    private IEnumerable<Vehicle>?   vehicles;
    private IEnumerable<Customer>?  customers;
    private DateTime                dateTimeModelYear;
    private DateTime                dateTimeYearManufacture;

    private ConfirmDialog           dialogDeleteVehicle = default!;

    private async Task ShowConfirmationDeleteVehicleAsync(int id)
    {
        var confirmation = await dialogDeleteVehicle.ShowAsync(
            title: "Tem certeza que deseja deletar o vehicle?",
            message1: "Não será possivel recuperar suas informações após essa ação.",
            message2: "Deseja continuar?");

        if (confirmation) {
            vehicle = await Http.GetFromJsonAsync<Vehicle?>($"{route}/{id}");
            HandleDeleteVehicleSubmit();
        }
    }

    private async Task HandleDeleteVehicleSubmit() {
        var response = await Http.DeleteAsync($"{route}/{vehicle.Id}");
        if (response.StatusCode == HttpStatusCode.OK) {
            ShowMessage(new DialogMessage.ToastSucessMessage("Veiculo deletado", "o vehicle foi deletado com sucesso."));
        } else if (response.StatusCode == HttpStatusCode.InternalServerError) {
            ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
        } else {
            ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
        }
    }

    private void ResetVehicle() {
        dateTimeModelYear = DateTime.Now;
        dateTimeYearManufacture = DateTime.Now;
        vehicle = new Vehicle();
        transaction = new Transaction();
        editContext = new EditContext(vehicle);
    }

    private async Task OnShowModalBuyVehicle() {
        await buyVehicleModal.ShowAsync();
    }

    private async Task OnHideModalBuyVehicle() {
        await buyVehicleModal.HideAsync();
        ResetVehicle();
    }

    private async Task OnShowModalSellVehicle(Vehicle v) {
        vehicle = v;
        await sellVehicleModal.ShowAsync();
    }

    private async Task OnHideModalSellVehicle() {
        await sellVehicleModal.HideAsync();
        ResetVehicle();
    }

    private async Task OnShowModalInfoVehicle(Vehicle v) {
        vehicle = v;
        await infoVehicleModal.ShowAsync();
    }

    private async Task OnHideModalInfoVehicle() {
        await infoVehicleModal.HideAsync();
        ResetVehicle();
    }

    List<ToastMessage> messages = new List<ToastMessage>();
    private void ShowMessage(ToastMessage toastType) => messages.Add(DialogMessage.CreateToastMessage(toastType));

    private async Task HandleSellVehicleSubmit() {
        var validInputs = (editContext?.Validate() ?? false);

        if (validInputs) {
            transaction.TypeTransaction = "VENDA";
            transaction.Value = ValueV;
            transaction.VehicleId = vehicle.Id;
            transaction.Vehicle = vehicle;
            transaction.Vehicle.Situation = "INDISPONIVEL";
            transaction.Customer = null;
            Console.WriteLine(transaction.ToString());
            var response = await Http.PostAsJsonAsync($"{routeFinancial}/venda", transaction);
            if (response.StatusCode == HttpStatusCode.Created) {
                ShowMessage(new DialogMessage.ToastSucessMessage("Veiculo vendido", "o veiculo foi vendido com sucesso."));
                OnHideModalBuyVehicle();
            } else if (response.StatusCode == HttpStatusCode.InternalServerError) {
                ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
                OnHideModalBuyVehicle();
            } else {
                ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
            }
        };
    }

    private async Task HandleBuyVehicleSubmit() {
        var validInputs = (editContext?.Validate() ?? false);

        vehicle.ModelYear = dateTimeModelYear.ToUniversalTime();
        vehicle.YearManufacture = dateTimeYearManufacture.ToUniversalTime();
        if (validInputs) {
            transaction.Value = ValueV;
            transaction.Vehicle = vehicle;
            Console.WriteLine(transaction.ToString());
            var response = await Http.PostAsJsonAsync($"{routeFinancial}/compra", transaction);
            if (response.StatusCode == HttpStatusCode.Created) {
                ShowMessage(new DialogMessage.ToastSucessMessage("Veiculo cadastrado", "o veiculo foi cadastrado com sucesso."));
                OnHideModalBuyVehicle();
            } else if (response.StatusCode == HttpStatusCode.InternalServerError) {
                ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
                OnHideModalBuyVehicle();
            } else {
                ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
            }
        }
    }

    protected override async Task OnInitializedAsync() {
        var list = await refit.GetVehicles(auth.Token);
        vehicles = list.Content;
        dateTimeModelYear = DateTime.Now;
        dateTimeYearManufacture = DateTime.Now;
        vehicle = new Vehicle();
        transaction = new Transaction();
        editContext = new EditContext(vehicle);
    }

    string customerInputName;

    private async Task<AutoCompleteDataProviderResult<Customer>> CustomersDataProvider(AutoCompleteDataProviderRequest<Customer> request) {
        customers = await GetCustomers(request.Filter.Value);
        return await Task.FromResult(request.ApplyTo(customers.OrderBy(Customer => Customer.Name)));
    }

    private async Task<IEnumerable<Customer>> GetCustomers(string input) {
        return await Http.GetFromJsonAsync<Customer[]?>($"clientes/?name={input}");
    }

    private void OnAutoCompleteChanged(Customer customerInput) {
        transaction.CustomerId = customerInput.Id;
        Console.WriteLine($"'{customerInput?.Name}' selected.");
        StateHasChanged();
    }
}

@* 
- Fazer upload de imagem
- Fazer rota de movimentação.
- Fazer rota de compra e venda.

 *@