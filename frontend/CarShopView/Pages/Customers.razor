@page "/clientes"
@inject HttpClient Http
@inject ICustomerRepository refit
@using System.ComponentModel.DataAnnotations
@using CarShopView.Repositories
@using CarShopView.Models
@using System.Net
@using System.Text.Json
@using CarShopView.Services;

<PageTitle>Clientes</PageTitle>

@* <h1>Painel de Clientes</h1>
<nav class="row row-cols-auto justify-content-end mb-5">
	<div class="col justify-content-md-end">
		<AutoComplete @bind-Value="customerInputName"
					  TItem="Customer"
					  DataProvider="CustomersDataProvider"
					  PropertyName="Name"
					  Placeholder="Procure por clientes..."
					  OnChanged="(Customer customerInput) => OnAutoCompleteChanged(customerInput)"
					  Size="AutoCompleteSize.Small" />
	</div>
	<div class="d-grid gap-2 d-md-flex justify-content-md-end">
		<Button Class="col bi bi-person-plus-fill" Color="ButtonColor.Primary" @onclick='OnShowModalRegister'> Cadastrar Cliente</Button>
	</div>
</nav> *@

<Grid TItem="Customer"
	Class="table table-hover table-bordered table-striped"
	Data="service.CustomerList"
	AllowSorting="true">

	<GridColumns>
		<GridColumn TItem="Customer" HeaderText="Nome" SortKeySelector="@(item => item.Name)">
			@context.Name
		</GridColumn>
		<GridColumn TItem="Customer" HeaderText="Tipo de documento" SortKeySelector="@(item => item.DocType)">
			@context.DocType
		</GridColumn>
		<GridColumn TItem="Customer" HeaderText="Número do documento" Sortable="false">
			@context.DocNumber
		</GridColumn>
		<GridColumn TItem="Customer" Sortable="false">
			@* <button class="btn btn-primary bi bi-pencil-square" @onclick="() => OnShowModalEdit(context)"></button> *@
		</GridColumn>
		<GridColumn TItem="Customer" Sortable="false">
			@* <button class="btn btn-danger bi bi-trash3" @onclick='() => OnShowModalDelete(context)'></button> *@
		</GridColumn>
	</GridColumns>
</Grid>

<Pagination ActivePageNumber="@service.CurrentPageNumber"
            TotalPages="@service.Pagination.TotalPages"
            PageChanged="OnPageChangedAsync" />

<text>Current Page Number: @service.CurrentPageNumber</text>


@code {
    


}

@* <Modal @ref="deleteCustomerModal"
	OnHidden='OnHideModalDelete'
	Title="Deseja prosseguir com a exclusão?">
	<BodyTemplate>
		Ao confirmar essa ação o cliente @customer.Name será excluido.
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Secondary" @onclick='OnHideModalDelete'>Close</Button>
		<Button Color="ButtonColor.Primary" @onclick='HandleDeleteCustomerSubmit'>Save changes</Button>
	</FooterTemplate>
</Modal>

<Modal @ref="registerCustomerModal"
	OnShow='OnShowModalRegister'
	OnHidden='OnHideModalRegister'
	Title="Cadastrar Cliente">
	<BodyTemplate>
		<CustomerForm FormName="register" Customer="@customer" OnSubmit="@HandleEditCustomerSubmit"/>
	</BodyTemplate>
</Modal>

<Modal @ref="editCustomerModal"
	OnHidden='OnHideModalEdit'
	Title="Editar Cliente">
	<BodyTemplate>
		<CustomerForm FormName="edit" Customer="@customer" OnSubmit="@HandleEditCustomerSubmit"/>
	</BodyTemplate>
</Modal>
 *@


@* <DialogMessage Messages="@messages" /> *@

@code {
	CustomerService					service;

	protected override async Task OnInitializedAsync() {
		var querys = new QueryCustomers();
		var response = await refit.GetCustomers(querys);
		var pagination = response.Headers.GetValues("X-Pagination").FirstOrDefault();
		if (pagination is not null) {
			service = new CustomerService {
				Querys = querys,
				ActualCustomer = new Customer(),
				Pagination = JsonSerializer.Deserialize<PaginationHeader>(pagination),
				CustomerList = response.Content
			};
		}
		@* editContext = new EditContext(customer); *@
	}

	private async Task OnPageChangedAsync(int newPageNumber)
    {
		QueryCustomers test = new();
		service.Querys.PageNumber = newPageNumber;
		service.Querys.PageSize = 2;
		var response = await refit.GetCustomers(service.Querys);
		var pagination = response.Headers.GetValues("X-Pagination").FirstOrDefault();
		if (pagination is not null) {
			service.Pagination = JsonSerializer.Deserialize<PaginationHeader>(pagination);
		}
		service.CustomerList = response.Content;
        await Task.Run(() => { service.CurrentPageNumber = newPageNumber; });
    }

	@* Config Modals *@
	@* private Modal                   registerCustomerModal = default!;
	private Modal                   deleteCustomerModal = default!;
	private Modal                   editCustomerModal = default!; *@

	@* Config input context *@
	@* private EditContext?            editContext; *@

	@* Config Info Message *@
	@* private List<ToastMessage> messages = new List<ToastMessage>();
	private void ShowMessage(ToastMessage toastType) => messages.Add(DialogMessage.CreateToastMessage(toastType)); *@

	@* Config search Input *@
	@* private string?                 customerInputName; *@


	@* private async Task<GridDataProviderResult<Customer>> CustomersDataProvider(GridDataProviderRequest<Customer> request)
	{
		var response = await refit.GetCustomers();
		var pagination = response.Headers.GetValues("X-Pagination").FirstOrDefault();
		if (pagination is not null) {
			customerPagination = JsonSerializer.Deserialize<PaginationHeader>(pagination);
			return await Task.FromResult(new GridDataProviderResult<Customer> { Data = response.Content, TotalCount = customerPagination.TotalCount });
		}
		return await Task.FromResult( new GridDataProviderResult<Customer> { Data = response.Content, TotalCount = 5} );
	} *@
@* 
	private void ResetCustomer() {
		customer = new Customer();
		editContext = new EditContext(customer);
	}

	private async Task OnShowModalDelete(Customer selectedCustomer) {
		customer = selectedCustomer;
		await deleteCustomerModal.ShowAsync();
	}

	private async Task OnHideModalDelete() {
		ResetCustomer();
		await deleteCustomerModal.HideAsync();
	}

	private async Task OnShowModalEdit(Customer selectedCustomer) {
		customer = selectedCustomer;
		await editCustomerModal.ShowAsync();
	}

	private async Task OnHideModalEdit() {
		ResetCustomer();
		await editCustomerModal.HideAsync();
	}

	private async Task OnShowModalRegister() {
		await registerCustomerModal.ShowAsync();
	}

	private async Task OnHideModalRegister() {
		ResetCustomer();
		await registerCustomerModal.HideAsync();
	} *@

	@* private async Task<AutoCompleteDataProviderResult<Customer>> CustomersDataProvider(AutoCompleteDataProviderRequest<Customer> request) {
		var test = await refit.GetCustomers();
		return await Task.FromResult(request.ApplyTo(test.Content.OrderBy(Customer => Customer.Name)));
	} *@

	@* private void OnAutoCompleteChanged(Customer customerInput) {
		Console.WriteLine($"'{customerInput?.Name}' selected.");
		StateHasChanged();
	} *@

	@* private async Task HandleInsertCustomerSubmit() {
		var validInputs = (editContext?.Validate() ?? false);

		if (validInputs) {
			var response = await Http.PostAsJsonAsync(route, customer);
			if (response.StatusCode == HttpStatusCode.Created) {
				ShowMessage(new DialogMessage.ToastSucessMessage("Cliente cadastrado", "o cliente foi cadastrado com sucesso."));
				OnHideModalRegister();
			} else if (response.StatusCode == HttpStatusCode.InternalServerError) {
				ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
				OnHideModalRegister();
			} else {
				ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
			}
		}
	}

	private async Task HandleEditCustomerSubmit(Customer c) {
		var response = await Http.PutAsJsonAsync($"{route}/{c.Id}", c);
		if (response.StatusCode == HttpStatusCode.OK) {
			ShowMessage(new DialogMessage.ToastSucessMessage("Cliente editado", "o cliente foi editado com sucesso."));
			OnHideModalEdit();
		} else if (response.StatusCode == HttpStatusCode.InternalServerError) {
			ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
			OnHideModalEdit();
		} else {
			ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
		}
	}

	private async Task HandleDeleteCustomerSubmit() {
		var response = await Http.DeleteAsync($"{route}/{customer.Id}");
		if (response.StatusCode == HttpStatusCode.OK) {
			ShowMessage(new DialogMessage.ToastSucessMessage("Cliente deletado", "o cliente foi deletado com sucesso."));
			OnHideModalDelete();
		} else if (response.StatusCode == HttpStatusCode.InternalServerError) {
			ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
			OnHideModalDelete();
		} else {
			ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
		}
	} *@
}