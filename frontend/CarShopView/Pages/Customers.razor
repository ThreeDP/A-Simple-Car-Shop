@page "/clientes"
@using System.ComponentModel.DataAnnotations
@using CarShopView.Repositories
@using CarShopView.Models
@using CarShopView.Querys
@using System.Net
@using System.Text.Json
@using CarShopView.Services;
@inject ICustomerRepository refit
@inject ICustomerService service
@inject IAuthService auth

<PageTitle>Clientes</PageTitle>

<h1>Painel de Clientes</h1>
<nav class="row row-cols-auto justify-content-end mb-5">
	<div class="col justify-content-md-end">
        <AutoComplete @bind-Value="customerName"
                      TItem="Customer"
                      DataProvider="CustomersDataProvider"
                      PropertyName="Name"
                      Placeholder="Search a customer..."
                      OnChanged="(Customer customer) => OnAutoCompleteChanged(customer)" />
    </div>
	<div class="d-grid gap-2 d-md-flex justify-content-md-end">
		<Button Class="col bi bi-person-plus-fill" Color="ButtonColor.Primary" @onclick='OnShowModalRegister'> Cadastrar Cliente</Button>
	</div>
</nav>

<Grid TItem="ICustomer"
	Class="table table-hover table-bordered table-striped"
	Data="service.CustomerList"
	AllowSorting="true">

	<GridColumns>
		<GridColumn TItem="ICustomer" HeaderText="Nome" SortKeySelector="@(item => item.Name)">
			@context.Name
		</GridColumn>
		<GridColumn TItem="ICustomer" HeaderText="Tipo de documento" SortKeySelector="@(item => item.DocType)">
			@context.DocType
		</GridColumn>
		<GridColumn TItem="ICustomer" HeaderText="Número do documento" Sortable="false">
			@context.DocNumber
		</GridColumn>
		<GridColumn TItem="ICustomer" Sortable="false">
			<button class="btn btn-primary bi bi-pencil-square" @onclick="() => OnShowModalEdit(context)"></button> 
		</GridColumn>
		<GridColumn TItem="ICustomer" Sortable="false">
			<button class="btn btn-danger bi bi-trash3" @onclick='() => OnShowModalDelete(context)'></button> 
		</GridColumn>
	</GridColumns>
</Grid>

<Modal @ref="editCustomerModal"
	OnHidden='OnHideModalEdit'
	Title="Editar Cliente">
	<BodyTemplate>
		<CustomerForm FormName="Editar Cliente" Customer="@service.ActualCustomer" OnSubmit="@HandleEditCustomerSubmit" />
	</BodyTemplate>
</Modal>

<Modal @ref="registerCustomerModal"
	OnShow='OnShowModalRegister'
	OnHidden='OnHideModalRegister'
	Title="Cadastrar Cliente">
	<BodyTemplate>
		<CustomerForm FormName="register" Customer="@service.ActualCustomer" OnSubmit="@HandleInsertCustomerSubmit"/>
	</BodyTemplate>
</Modal>

 <Modal @ref="deleteCustomerModal"
	OnHidden='OnHideModalDelete'
	Title="Deseja prosseguir com a exclusão?">
	<BodyTemplate>
		Ao confirmar essa ação o cliente @service.ActualCustomer.Name será excluido.
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Secondary" @onclick='OnHideModalDelete'>Cancelar</Button>
		<Button Color="ButtonColor.Danger" @onclick='HandleDeleteCustomerSubmit'>Confirmar</Button>
	</FooterTemplate>
</Modal>

<Pagination ActivePageNumber="@service.CurrentPageNumber"
            TotalPages="@service.Pagination.TotalPages"
            PageChanged="OnPageChangedAsync" />

<text>Current Page Number: @service.CurrentPageNumber</text>

<DialogMessage Messages="@messages" />

@code {
	private Modal                   editCustomerModal = default!;
	private Modal                   deleteCustomerModal = default!;
	private Modal                   registerCustomerModal = default!;

	// Config input context
	private EditContext?            editContext;

	// Config Info Message
	private List<ToastMessage> messages = new List<ToastMessage>();
	private void ShowMessage(ToastMessage toastType) => messages.Add(DialogMessage.CreateToastMessage(toastType));

	private void ResetCustomer() {
		service.ActualCustomer = new Customer();
		editContext = new EditContext(service.ActualCustomer);
	}

	protected override async Task OnInitializedAsync() {
		var response = await refit.GetCustomers(service.Querys, auth.Token);
		var pagination = response.Headers.GetValues("X-Pagination").FirstOrDefault();
		if (pagination is not null) {
			service.Pagination = JsonSerializer.Deserialize<PaginationHeader>(pagination);
		}
		service.CustomerList = response.Content;
		editContext = new EditContext(service.ActualCustomer);
	}

	private async Task OnPageChangedAsync(int newPageNumber)
    {
		service.Querys.PageNumber = newPageNumber;
		service.Querys.PageSize = 2;
		var response = await refit.GetCustomers(service.Querys, auth.Token);
		var pagination = response.Headers.GetValues("X-Pagination").FirstOrDefault();
		if (pagination is not null) {
			service.Pagination = JsonSerializer.Deserialize<PaginationHeader>(pagination);
		}
		service.CustomerList = response.Content;
        await Task.Run(() => { service.CurrentPageNumber = newPageNumber; });
    }

	private async Task OnShowModalEdit(ICustomer selectedCustomer) {
		service.ActualCustomer = selectedCustomer;
		await editCustomerModal.ShowAsync();
	}

	private async Task OnHideModalEdit() {
		ResetCustomer();
		await editCustomerModal.HideAsync();
	}

	private async Task HandleEditCustomerSubmit(ICustomer c) {
		var response = await refit.PutCustomer(c.Id, c, auth.Token);
		if (response.StatusCode == HttpStatusCode.OK) {
			ShowMessage(new DialogMessage.ToastSucessMessage("Cliente editado", "o cliente foi editado com sucesso."));
			OnHideModalEdit();
		} else if (response.StatusCode == HttpStatusCode.InternalServerError) {
			ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
			OnHideModalEdit();
		} else {
			ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
		}
	}

	private async Task OnShowModalDelete(ICustomer selectedCustomer) {
		service.ActualCustomer = selectedCustomer;
		await deleteCustomerModal.ShowAsync();
	}

	private async Task OnHideModalDelete() {
		ResetCustomer();
		await deleteCustomerModal.HideAsync();
	}
	
	private async Task HandleDeleteCustomerSubmit() {
		var response = await refit.DeleteCustomer(service.ActualCustomer.Id, auth.Token);
		if (response.StatusCode == HttpStatusCode.OK) {
			ShowMessage(new DialogMessage.ToastSucessMessage("Cliente deletado", "o cliente foi deletado com sucesso."));
			OnHideModalDelete();
		} else if (response.StatusCode == HttpStatusCode.InternalServerError) {
			ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
			OnHideModalDelete();
		} else {
			ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
		}
	}

	private async Task OnShowModalRegister() {
		await registerCustomerModal.ShowAsync();
	}

	private async Task OnHideModalRegister() {
		ResetCustomer();
		await registerCustomerModal.HideAsync();
	}

	private async Task HandleInsertCustomerSubmit(ICustomer customer) {
		var validInputs = (editContext?.Validate() ?? false);

		if (validInputs) {
			var response = await refit.PostCustomer(customer, auth.Token);
			if (response.StatusCode == HttpStatusCode.Created) {
				ShowMessage(new DialogMessage.ToastSucessMessage("Cliente cadastrado", "o cliente foi cadastrado com sucesso."));
				OnHideModalRegister();
			} else if (response.StatusCode == HttpStatusCode.InternalServerError) {
				ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
				OnHideModalRegister();
			} else {
				ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
			}
		}
	}

	private string customerName = default!;

	private async Task<AutoCompleteDataProviderResult<Customer>> CustomersDataProvider(AutoCompleteDataProviderRequest<Customer> request)
    {
		service.Querys.Name = request.Filter.Value;
        var response = await refit.GetCustomers(service.Querys, auth.Token);
		var customers = response.Content;
		service.CustomerList = response.Content;
		var pagination = response.Headers.GetValues("X-Pagination").FirstOrDefault();
		if (pagination is not null) {
			service.Pagination = JsonSerializer.Deserialize<PaginationHeader>(pagination);
		}
        return await Task.FromResult(new AutoCompleteDataProviderResult<Customer> { Data = customers, TotalCount = customers.Count() });
    }

    private async void OnAutoCompleteChanged(Customer customer) {

	}
}