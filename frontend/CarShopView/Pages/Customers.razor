@page "/clientes"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@using CarShopView.Models
@using System.Net
@using System.Text.Json

<PageTitle>Clientes</PageTitle>

<h1>Painel de Clientes</h1>
<nav class="row row-cols-auto justify-content-end mb-5">
	<div class="col justify-content-md-end">
		<AutoComplete @bind-Value="customerInputName"
					  TItem="Customer"
					  DataProvider="CustomersDataProvider"
					  PropertyName="Name"
					  Placeholder="Procure por clientes..."
					  OnChanged="(Customer customerInput) => OnAutoCompleteChanged(customerInput)"
					  Size="AutoCompleteSize.Small" />
	</div>
	<div class="d-grid gap-2 d-md-flex justify-content-md-end">
		<Button Class="col bi bi-person-plus-fill" Color="ButtonColor.Primary" @onclick='OnShowModalRegister'> Cadastrar Cliente</Button>
	</div>
</nav>

<Grid TItem="Customer"
	Class="table table-hover table-bordered table-striped"
	DataProvider="CustomersDataProvider"
	AllowPaging="true"
	AllowSorting="true">

	<GridColumns>
		<GridColumn TItem="Customer" HeaderText="Nome" SortKeySelector="@(item => item.Name)">
			@context.Name
		</GridColumn>
		<GridColumn TItem="Customer" HeaderText="Tipo de documento" SortKeySelector="@(item => item.DocType)">
			@context.DocType
		</GridColumn>
		<GridColumn TItem="Customer" HeaderText="Número do documento" Sortable="false">
			@context.DocNumber
		</GridColumn>
		<GridColumn TItem="Customer" Sortable="false">
			<button class="btn btn-primary bi bi-pencil-square" @onclick="() => OnShowModalEdit(context)"></button>
		</GridColumn>
		<GridColumn TItem="Customer" Sortable="false">
			<button class="btn btn-danger bi bi-trash3" @onclick='() => OnShowModalDelete(context)'></button>
		</GridColumn>
	</GridColumns>
</Grid>

<Modal @ref="deleteCustomerModal"
	OnHidden='OnHideModalDelete'
	Title="Deseja prosseguir com a exclusão?">
	<BodyTemplate>
		Ao confirmar essa ação o cliente @customer.Name será excluido.
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Secondary" @onclick='OnHideModalDelete'>Close</Button>
		<Button Color="ButtonColor.Primary" @onclick='HandleDeleteCustomerSubmit'>Save changes</Button>
	</FooterTemplate>
</Modal>

<Modal @ref="registerCustomerModal"
	OnShow='OnShowModalRegister'
	OnHidden='OnHideModalRegister'
	Title="Cadastrar Cliente">
	<BodyTemplate>
		<CustomerForm FormName="register" Customer="@customer" OnSubmit="@HandleEditCustomerSubmit"/>
	</BodyTemplate>
</Modal>

<Modal @ref="editCustomerModal"
	OnHidden='OnHideModalEdit'
	Title="Editar Cliente">
	<BodyTemplate>
		<CustomerForm FormName="edit" Customer="@customer" OnSubmit="@HandleEditCustomerSubmit"/>
	</BodyTemplate>
</Modal>

<DialogMessage Messages="@messages" />

@code {
	@* Config Route *@
	const string                    route = "clientes";
	private int                     deleteId = 0;

	@* Config Modals *@
	private Modal                   registerCustomerModal = default!;
	private Modal                   deleteCustomerModal = default!;
	private Modal                   editCustomerModal = default!;

	@* Config input context *@
	private EditContext?            editContext;

	@* Config Info Message *@
	private List<ToastMessage> messages = new List<ToastMessage>();
	private void ShowMessage(ToastMessage toastType) => messages.Add(DialogMessage.CreateToastMessage(toastType));

	@* Config search Input *@
	private string?                 customerInputName;

	@* Response and Request *@
	private Customer                customer;
	private IEnumerable<Customer>?  customers;

	private async Task<HttpResponseMessage> GetCustomers(GridDataProviderRequest<Customer> request, string input) {
		int numberOfParameters = 0;
		var path = $"{route}/";
		if (!string.IsNullOrEmpty(input)) {
			path = $"{path}?name={input}";
			numberOfParameters++;
		}
		if (numberOfParameters > 0) {
			path = $"{path}&";
		} else {
			path = $"{path}?";
		}
		path = $"{path}PageNumber={request.PageNumber}&PageSize={request.PageSize}";
		var res = await Http.GetAsync("clientes");
		Console.WriteLine($"Olha Headers: {res.Headers}");
        if (res.Content.Headers.TryGetValues("x-pagination", out var newPag)) {
            Console.WriteLine($"Try Values: {newPag}");
        }
        if (res.Content.Headers.TryGetValues("content-type", out var newCont)) {
            var n = newCont.FirstOrDefault();
            Console.WriteLine($"Try Values content-type: {newCont}");
            Console.WriteLine($"Novo: {n}");
        }
        if (res.Headers.TryGetValues("X-Pagination", out var newPag2)) {
            Console.WriteLine($"Try Values x-pagination2: {newPag}");
        }
        if (res.Headers.TryGetValues("Content-Type", out var newCont2)) {
            Console.WriteLine($"Try Values content-type2: {newCont2}");
        }
		Console.WriteLine($"Headers One: {res.Headers}");
		Console.WriteLine($"Headers Two: {res.Content.Headers.ToString()}");
		return res;
	}
	
	private async Task<GridDataProviderResult<Customer>> CustomersDataProvider(GridDataProviderRequest<Customer> request)
	{
		var customerResponse = await GetCustomers(request, "");
		var test1 = await customerResponse.Content.ReadAsStringAsync();
		customers = JsonSerializer.Deserialize<Customer[]>(test1);
		//if (customerResponse.Headers.Contains("Content-Type")) {
			Console.WriteLine($"Headers: {customerResponse.Content.Headers}");
		//}
		if (customerResponse.Content.Headers.TryGetValues("x-pagination", out var pagesInfo)) {
			//var pg = pagesInfo.FirstOrDefault();
			//var pageInfo = JsonSerializer.Deserialize<PaginationHeader>(pg);
			return await Task.FromResult(new GridDataProviderResult<Customer> { Data = customers, TotalCount = 8 });
		}
		return await Task.FromResult( new GridDataProviderResult<Customer> { Data = customers, TotalCount = 5} );
	}

	private void ResetCustomer() {
		customer = new Customer();
		editContext = new EditContext(customer);
	}

	private async Task OnShowModalDelete(Customer selectedCustomer) {
		customer = selectedCustomer;
		await deleteCustomerModal.ShowAsync();
	}

	private async Task OnHideModalDelete() {
		ResetCustomer();
		await deleteCustomerModal.HideAsync();
	}

	private async Task OnShowModalEdit(Customer selectedCustomer) {
		customer = selectedCustomer;
		await editCustomerModal.ShowAsync();
	}

	private async Task OnHideModalEdit() {
		ResetCustomer();
		await editCustomerModal.HideAsync();
	}

	private async Task OnShowModalRegister() {
		await registerCustomerModal.ShowAsync();
	}

	private async Task OnHideModalRegister() {
		ResetCustomer();
		await registerCustomerModal.HideAsync();
	}

	private async Task<AutoCompleteDataProviderResult<Customer>> CustomersDataProvider(AutoCompleteDataProviderRequest<Customer> request) {
		customers = await GetCustomers(request.Filter.Value);
		return await Task.FromResult(request.ApplyTo(customers.OrderBy(Customer => Customer.Name)));
	}

	private async Task<IEnumerable<Customer>> GetCustomers(string input) {
		return await Http.GetFromJsonAsync<Customer[]?>($"{route}/?name={input}&range=1000");
	}

	private void OnAutoCompleteChanged(Customer customerInput) {
		Console.WriteLine($"'{customerInput?.Name}' selected.");
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync() {
		var list = await Http.GetFromJsonAsync<Customer[]>(route);
		customers = list;
		customer = new Customer();
		editContext = new EditContext(customer);
	}

	private async Task HandleInsertCustomerSubmit() {
		var validInputs = (editContext?.Validate() ?? false);

		if (validInputs) {
			var response = await Http.PostAsJsonAsync(route, customer);
			if (response.StatusCode == HttpStatusCode.Created) {
				ShowMessage(new DialogMessage.ToastSucessMessage("Cliente cadastrado", "o cliente foi cadastrado com sucesso."));
				OnHideModalRegister();
			} else if (response.StatusCode == HttpStatusCode.InternalServerError) {
				ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
				OnHideModalRegister();
			} else {
				ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
			}
		}
	}

	private async Task HandleEditCustomerSubmit(Customer c) {
		var response = await Http.PutAsJsonAsync($"{route}/{c.Id}", c);
		if (response.StatusCode == HttpStatusCode.OK) {
			ShowMessage(new DialogMessage.ToastSucessMessage("Cliente editado", "o cliente foi editado com sucesso."));
			OnHideModalEdit();
		} else if (response.StatusCode == HttpStatusCode.InternalServerError) {
			ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
			OnHideModalEdit();
		} else {
			ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
		}
	}

	private async Task HandleDeleteCustomerSubmit() {
		var response = await Http.DeleteAsync($"{route}/{customer.Id}");
		if (response.StatusCode == HttpStatusCode.OK) {
			ShowMessage(new DialogMessage.ToastSucessMessage("Cliente deletado", "o cliente foi deletado com sucesso."));
			OnHideModalDelete();
		} else if (response.StatusCode == HttpStatusCode.InternalServerError) {
			ShowMessage(new DialogMessage.ToastErrorMessage("Error ao processar sua solicitação", "Ocorreu um erro ao processar sua mensagem tente mais tarde..."));
			OnHideModalDelete();
		} else {
			ShowMessage(new DialogMessage.ToastWarningMessage("Informações incorretas", "error ao processar dados."));
		}
	}
}