@page "/movimentacoes"
@using CarShopView.Repositories
@using CarShopView.Services
@using CarShopView.Models;
@using CarShopView.Querys;
@inject IAuthService auth
@inject ITransactionsRepository refit
@inject IQueryTransactions querys

<PageTitle>Movimentações Financeiras</PageTitle>

<h1>Movimentações Financeiras</h1>

<Grid TItem="ITransactionResponse"
	Class="table table-hover table-bordered table-striped"
	Data="transactions"
	AllowSorting="true">

	<GridColumns>
		<GridColumn TItem="ITransactionResponse" HeaderText="Tipo de Transação" SortKeySelector="@(item => item.Type)">
			@context.Type
		</GridColumn>
		<GridColumn TItem="ITransactionResponse" HeaderText="Cliente" SortKeySelector="@(item => item.Customer)">
			@context.Customer
		</GridColumn>
		<GridColumn TItem="ITransactionResponse" HeaderText="Veículo" SortKeySelector="@(item => item.Vehicle)">
			@context.Vehicle
		</GridColumn>
		<GridColumn TItem="ITransactionResponse" HeaderText="Valor (R\$)" SortKeySelector="@(item => item.Value)">
			@context.Value
		</GridColumn>
	</GridColumns>
</Grid>

@code {
    private IEnumerable<ITransactionResponse>? transactions;
    private decimal TotalValue = 0;
    private int     TotalMovimentation = 0;

    protected override async Task OnInitializedAsync()
    {
        transactions = new List<TransactionResponse>();
        var response = await refit.GetTransactions(querys, auth.Token);
        transactions = response.Content;
        // Colocar essa parte como resposta da api no header
        if (transactions is not null) {
            TotalValue = transactions.Sum(f => f.Value);
            TotalMovimentation = transactions.Count();
        }
    }
}
